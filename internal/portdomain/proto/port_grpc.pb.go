// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// PortDomainClient is the client API for PortDomain service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PortDomainClient interface {
	Upsert(ctx context.Context, opts ...grpc.CallOption) (PortDomain_UpsertClient, error)
	GetPort(ctx context.Context, in *GetPortRequest, opts ...grpc.CallOption) (*Port, error)
}

type portDomainClient struct {
	cc grpc.ClientConnInterface
}

func NewPortDomainClient(cc grpc.ClientConnInterface) PortDomainClient {
	return &portDomainClient{cc}
}

func (c *portDomainClient) Upsert(ctx context.Context, opts ...grpc.CallOption) (PortDomain_UpsertClient, error) {
	stream, err := c.cc.NewStream(ctx, &PortDomain_ServiceDesc.Streams[0], "/portdomainsvc.PortDomain/Upsert", opts...)
	if err != nil {
		return nil, err
	}
	x := &portDomainUpsertClient{stream}
	return x, nil
}

type PortDomain_UpsertClient interface {
	Send(*Port) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type portDomainUpsertClient struct {
	grpc.ClientStream
}

func (x *portDomainUpsertClient) Send(m *Port) error {
	return x.ClientStream.SendMsg(m)
}

func (x *portDomainUpsertClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *portDomainClient) GetPort(ctx context.Context, in *GetPortRequest, opts ...grpc.CallOption) (*Port, error) {
	out := new(Port)
	err := c.cc.Invoke(ctx, "/portdomainsvc.PortDomain/GetPort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortDomainServer is the server API for PortDomain service.
// All implementations must embed UnimplementedPortDomainServer
// for forward compatibility
type PortDomainServer interface {
	Upsert(PortDomain_UpsertServer) error
	GetPort(context.Context, *GetPortRequest) (*Port, error)
	mustEmbedUnimplementedPortDomainServer()
}

// UnimplementedPortDomainServer must be embedded to have forward compatible implementations.
type UnimplementedPortDomainServer struct {
}

func (UnimplementedPortDomainServer) Upsert(PortDomain_UpsertServer) error {
	return status.Errorf(codes.Unimplemented, "method Upsert not implemented")
}
func (UnimplementedPortDomainServer) GetPort(context.Context, *GetPortRequest) (*Port, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPort not implemented")
}
func (UnimplementedPortDomainServer) mustEmbedUnimplementedPortDomainServer() {}

// UnsafePortDomainServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PortDomainServer will
// result in compilation errors.
type UnsafePortDomainServer interface {
	mustEmbedUnimplementedPortDomainServer()
}

func RegisterPortDomainServer(s grpc.ServiceRegistrar, srv PortDomainServer) {
	s.RegisterService(&PortDomain_ServiceDesc, srv)
}

func _PortDomain_Upsert_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PortDomainServer).Upsert(&portDomainUpsertServer{stream})
}

type PortDomain_UpsertServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*Port, error)
	grpc.ServerStream
}

type portDomainUpsertServer struct {
	grpc.ServerStream
}

func (x *portDomainUpsertServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *portDomainUpsertServer) Recv() (*Port, error) {
	m := new(Port)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PortDomain_GetPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortDomainServer).GetPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portdomainsvc.PortDomain/GetPort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortDomainServer).GetPort(ctx, req.(*GetPortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PortDomain_ServiceDesc is the grpc.ServiceDesc for PortDomain service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PortDomain_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "portdomainsvc.PortDomain",
	HandlerType: (*PortDomainServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPort",
			Handler:    _PortDomain_GetPort_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upsert",
			Handler:       _PortDomain_Upsert_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "internal/portdomainsvc/grpc/port.proto",
}
